/* 그리디
 * 1783 병든 나이트
 * 병든 나이트는 여행을 하면서 방문한 칸의 수를 최대로 하려고 한다
 * 병든 나이트의 이동 횟수가 4번보다 적지 않다면, 이동 방법을 모두 한 번씩 사용해야 한다
 * 1. 2칸 위로, 1칸 오른쪽
 * 2. 1칸 위로, 2칸 오른쪽
 * 3. 1칸 아래로, 2칸 오른쪽
 * 4. 2칸 아래로, 1칸 오른쪽
 * 이동 횟수가 4번보다 적은 경우에는 이동 방법에 대한 제약이 없다
 * 체스판의 크기가 주어졌을 때, 병든 나이트가 여행에서 방문할 수 있는 칸의 최대 개수 출력
 */

#include <iostream>
using namespace std;

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, m;
	cin >> n >> m;

	if (n == 1) { // 세로가 1일 경우 움직일 수 없다
		cout << 1;
	}
	else if (n == 2) { // 세로가 2일 경우 2, 3번 방법으로 최대 세 번까지 움직일 수 있다
		// 네 번 이상 움직이면 이동 방법을 모두 한 번씩 사용해야 하는데
		// 1, 4번은 세로로 2칸 움직여야 하는데 그럴 수 없으므로 최대 세 번
		cout << min(4, (m + 1) / 2);
	}
	else {
		// 가로가 6 이하일 경우 최대 4칸 (1, 4, 2 or 3번)
		if (m <= 6)
			cout << min(4, m);
		else // 7 이상일 경우 2, 3번을 한 번씩 사용하고 나머지는 1, 4번
			cout << m - 2;
	}

	return 0;
}